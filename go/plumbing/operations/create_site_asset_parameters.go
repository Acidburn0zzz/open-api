package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCreateSiteAssetParams creates a new CreateSiteAssetParams object
// with the default values initialized.
func NewCreateSiteAssetParams() *CreateSiteAssetParams {
	var ()
	return &CreateSiteAssetParams{}
}

/*CreateSiteAssetParams contains all the parameters to send to the API endpoint
for the create site asset operation typically these are written to a http.Request
*/
type CreateSiteAssetParams struct {

	/*ContentType*/
	ContentType string
	/*Name*/
	Name string
	/*SiteID*/
	SiteID string
	/*Size*/
	Size int64
}

// WithContentType adds the contentType to the create site asset params
func (o *CreateSiteAssetParams) WithContentType(ContentType string) *CreateSiteAssetParams {
	o.ContentType = ContentType
	return o
}

// WithName adds the name to the create site asset params
func (o *CreateSiteAssetParams) WithName(Name string) *CreateSiteAssetParams {
	o.Name = Name
	return o
}

// WithSiteID adds the siteId to the create site asset params
func (o *CreateSiteAssetParams) WithSiteID(SiteID string) *CreateSiteAssetParams {
	o.SiteID = SiteID
	return o
}

// WithSize adds the size to the create site asset params
func (o *CreateSiteAssetParams) WithSize(Size int64) *CreateSiteAssetParams {
	o.Size = Size
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *CreateSiteAssetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	var res []error

	// query param content_type
	qrContentType := o.ContentType
	qContentType := qrContentType
	if qContentType != "" {
		if err := r.SetQueryParam("content_type", qContentType); err != nil {
			return err
		}
	}

	// query param name
	qrName := o.Name
	qName := qrName
	if qName != "" {
		if err := r.SetQueryParam("name", qName); err != nil {
			return err
		}
	}

	// path param site_id
	if err := r.SetPathParam("site_id", o.SiteID); err != nil {
		return err
	}

	// query param size
	qrSize := o.Size
	qSize := swag.FormatInt64(qrSize)
	if qSize != "" {
		if err := r.SetQueryParam("size", qSize); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
